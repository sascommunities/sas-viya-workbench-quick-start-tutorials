[{"kind":1,"language":"markdown","value":"# Execute SAS SQL in SAS Viya Workbench\n\n[SQL Procedure Documentation](https://go.documentation.sas.com/doc/en/pgmsascdc/default/sqlproc/n0w2pkrm208upln11i9r4ogwyvow.htm)\n\nThe SQL procedure implements Structured Query Language (SQL) for SAS. SQL is a standardized, widely used language that retrieves data from and updates data in tables and the views that are based on those tables.\n\nThe SAS SQL procedure enables you to do the following:\n\n- retrieve and manipulate data that is stored in tables or views.\n- create tables, views, and indexes on columns in tables.\n- create SAS macro variables that contain values from rows in a query's result.\n- add or modify the data values in a table’s columns or insert and delete rows. You can also modify the table itself by adding, modifying, or dropping columns.\n- send DBMS-specific SQL statements to a database management system (DBMS) and retrieve DBMS data.","outputs":[]},{"kind":1,"language":"markdown","value":"## 1. Download the data to the SAS Viya Workbench environment\n\n[HTTP Procedure Documentation](https://go.documentation.sas.com/doc/en/pgmsascdc/default/proc/n0t7v16eitluu2n15ffpfeafqszs.htm)\n\n[Example Data Sets for the SAS® Viya® Platform](https://support.sas.com/documentation/onlinedoc/viya/examples.htm)","outputs":[]},{"kind":2,"language":"sas","value":"/* REQUIRED: Modify to your Workbench folder path */\n%let path = /workspaces/myfolder/ExecutingSQL;\n\n/* Specify the URL of the CSV file */\n%let csvFile = https://support.sas.com/documentation/onlinedoc/viya/exampledatasets/home_equity.csv;\n \n/* Create an output CSV file in the Workbench environment in the ExecutingSQL folder */\nfilename he_csv \"&path./home_equity_sas.csv\";\n \n/* Download the and save CSV file to Workbench */\nproc http\n    url =\"&csvFile\"\n    method = \"GET\"\n    out = he_csv;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"## 2. Create a SAS table\n[IMPORT Procedure](https://go.documentation.sas.com/doc/en/pgmsascdc/default/proc/n18jyszn33umngn14czw2qfw7thc.htm)","outputs":[]},{"kind":2,"language":"sas","value":"proc import datafile = he_csv\n            dbms = csv\n            out = work.home_equity\n            replace;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"## 3. Execute SAS SQL\n### a. Preview the first 10 rows","outputs":[]},{"kind":1,"language":"markdown","value":"You can use the SAS code cell with PROC SQL to execute SQL.","outputs":[]},{"kind":2,"language":"sas","value":"proc sql;\n    SELECT *\n    FROM work.home_equity(obs=10);\nquit;","outputs":[]},{"kind":1,"language":"markdown","value":"### b. Use the SQL code cell","outputs":[]},{"kind":2,"language":"sql","value":"SELECT *\nFROM work.home_equity(obs=10);","outputs":[]},{"kind":1,"language":"markdown","value":"### c. Filter rows and columns","outputs":[]},{"kind":2,"language":"sql","value":"SELECT BAD, MORTDUE, VALUE, REASON, JOB\nFROM work.home_equity\nWHERE BAD = 1 AND\n      MORTDUE IS NOT NULL AND\n      VALUE IS NOT NULL AND \n      JOB = 'Sales'\nORDER BY MORTDUE DESC;","outputs":[]},{"kind":1,"language":"markdown","value":"### d. Create a calculated column","outputs":[]},{"kind":2,"language":"sql","value":"SELECT \n    BAD, \n    MORTDUE, \n    VALUE, \n    REASON, \n    JOB,\n    VALUE - MORTDUE as VALUE_DIFF  /* Create a column */\nFROM work.home_equity\nWHERE BAD = 1 AND\n      MORTDUE IS NOT NULL AND\n      VALUE IS NOT NULL AND\n      JOB = 'Sales'\nORDER BY VALUE_DIFF;","outputs":[]},{"kind":1,"language":"markdown","value":"### e. Filter a calculated column\nTraditionally, you will use the calculated expression in the WHERE clause.","outputs":[]},{"kind":2,"language":"sql","value":"SELECT \n    BAD, \n    MORTDUE, \n    VALUE, \n    REASON, \n    JOB,\n    VALUE - MORTDUE as VALUE_DIFF   /* Create a column */\nFROM work.home_equity\nWHERE BAD = 1 AND\n      MORTDUE IS NOT NULL AND\n      VALUE IS NOT NULL AND \n      JOB = 'Sales' AND\n      VALUE - MORTDUE < 0           /* Filter the calculated column */\nORDER BY VALUE_DIFF;","outputs":[]},{"kind":1,"language":"markdown","value":"SAS provides the [CALCULATED keyword](https://go.documentation.sas.com/doc/en/pgmsascdc/default/sqlproc/n0jxri3yohqdwbn1slekmsc882gz.htm) which refers to columns already calculated in the SELECT clause. This is very useful when the calculated column expression is complex.","outputs":[]},{"kind":2,"language":"sql","value":"SELECT \n    BAD, \n    MORTDUE, \n    VALUE, \n    REASON, \n    JOB,\n    VALUE - MORTDUE as VALUE_DIFF       /* Create a column */\nFROM work.home_equity\nWHERE BAD = 1 AND\n      MORTDUE IS NOT NULL AND\n      VALUE IS NOT NULL AND \n      JOB = 'Sales' AND\n      CALCULATED VALUE_DIFF < 0         /* Filter the calculated column using the CALCULATED keyword */\nORDER BY VALUE_DIFF;","outputs":[]},{"kind":1,"language":"markdown","value":"### f. Group by aggregations","outputs":[]},{"kind":1,"language":"markdown","value":"Calculate the total **MORTDUE** amount by **REGION**.","outputs":[]},{"kind":2,"language":"sql","value":"SELECT REGION, sum(MORTDUE) as TOTAL_MORTDUE\nFROM work.home_equity\nGROUP BY REGION;","outputs":[]},{"kind":1,"language":"markdown","value":"### g. Use SAS formats to modify the displayed output\nA SAS format is a type of SAS language element that applies a pattern to or executes instructions for a data value to be displayed or written as output. SAS formats can be used with SQL.\n\nView the list of available [SAS Formats by Category](https://go.documentation.sas.com/doc/en/pgmsascdc/default/leforinforref/n0p2fmevfgj470n17h4k9f27qjag.htm?fromDefault=).","outputs":[]},{"kind":2,"language":"sql","value":"SELECT REGION, \n       sum(MORTDUE) as TOTAL_MORTDUE format=dollar18.2  /* Add a format */\nFROM work.home_equity\nGROUP BY REGION;","outputs":[]},{"kind":1,"language":"markdown","value":"### h. Count the number of missing values \nCount the number of missing values in the **BAD**, **MORTDUE**, and **VALUE** columns.","outputs":[]},{"kind":2,"language":"sql","value":"SELECT\n    sum(CASE WHEN missing(BAD) THEN 1 ELSE 0 END) as MISSING_BAD,\n    sum(CASE WHEN missing(MORTDUE) THEN 1 ELSE 0 END) as MISSING_MORTVALUE,\n    sum(CASE WHEN missing(VALUE) THEN 1 ELSE 0 END) as MISSING_VALUE\nFROM work.home_equity;","outputs":[]},{"kind":1,"language":"markdown","value":"### i. Perform a simple join","outputs":[]},{"kind":1,"language":"markdown","value":"Create a sample table to perform a join.\n\n**NOTE**: This is a simple join for demonstration purposes. A CASE expression could be used for such a simple lookup.","outputs":[]},{"kind":2,"language":"sas","value":"data bad_lookup;\n    length LOAN_VALUE $10.;\n    do BAD=0 to 1;\n        if BAD = 0 then LOAN_VALUE = 'Paid';\n        else LOAN_VALUE = 'Default';\n        output;\n    end;\nrun;\n\nproc print data=bad_lookup;\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Join a sample of the **home_equity** table with the **bad_lookup** table.","outputs":[]},{"kind":2,"language":"sql","value":"SELECT he.*, l.LOAN_VALUE\nFROM home_equity(obs=10) he\n    INNER JOIN bad_lookup l ON he.BAD = l.BAD;","outputs":[]},{"kind":1,"language":"markdown","value":"### j. Create the final table\n- Add formats and labels\n- Add the calculated columns:\n    - Difference of the home value and mortgage due\n    - Proper case the city values\n    - Round the age of oldest trade line (months) value\n- Replace missing values in the **MORTDUE** and **VALUE** columns with the average\n- Join **home_equity** with the **bad_lookup** table","outputs":[]},{"kind":1,"language":"markdown","value":"#### Create SAS macro variables\nStore the average **MORTDUE** and **VALUE** in macro variables.","outputs":[]},{"kind":2,"language":"sql","value":"SELECT round(mean(MORTDUE)) as AVG_MORTDUE,\n       round(mean(VALUE)) as AVG_VALUE\nINTO :avg_mortdue TRIMMED, \n     :avg_value TRIMMED\nFROM work.home_equity;","outputs":[]},{"kind":1,"language":"markdown","value":"View the values of the macro variables.","outputs":[]},{"kind":2,"language":"sas","value":"%put &=avg_mortdue &=avg_value;","outputs":[]},{"kind":1,"language":"markdown","value":"#### Create the final table","outputs":[]},{"kind":2,"language":"sql","value":"CREATE TABLE home_equity_final AS\nSELECT he.BAD label='Loan status',\n       l.LOAN_VALUE label='Loan status value',\n       he.LOAN label='Amount of loan request' format=dollar18.2,\n       /* Replace missing MORTDUE using &avg_mortdue */\n       CASE\n           WHEN missing(he.MORTDUE) THEN &avg_mortdue                              /* Replace missing value with the stored macro variable */\n           ELSE he.MORTDUE\n       END AS MORTDUE label='Amount of existing mortgage' format=dollar18.2,\n       /* Replace missing VALUE using &avg_value */        \n       CASE\n           WHEN missing(he.VALUE) THEN &avg_value                                  /* Replace missing value with the stored macro variable */\n           ELSE he.VALUE\n       END AS VALUE label='Current property value' format=dollar18.2,           \n       CALCULATED VALUE -  CALCULATED MORTDUE AS VALUE_DIFF label='Property value to mortage difference' format=dollar18.2,\n       he.REASON label='Loan reason',\n       he.JOB label='Current job',\n       he.YOJ label='Years present at job',\n       he.DEROG label='Number of major derogatory reports',\n       he.DELINQ label='Number of delinquent credit lines',\n       round(he.CLAGE) AS CLAGE label='Age of oldest trade line (months)',         /* Round the value to the nearest whole number */\n       he.NINQ label='Number of recent lines of credit',\n       he.CLNO label='Number of current lines of credit',\n       he.DEBTINC label='Ratio of debt to income',\n       he.APPDATE label='Application date' format=date9.,                          /* Apply a format to the date value */\n       propcase(he.CITY) AS CITY label='City',                                     /* Proper case city */\n       he.STATE label='State', \n       he.DIVISION label='Division',\n       he.REGION label='Region'\nFROM home_equity he\n    INNER JOIN bad_lookup l ON he.BAD = l.BAD;\n\n\n/* Preview final table */\nSELECT * FROM home_equity_final(obs=10);","outputs":[]},{"kind":1,"language":"markdown","value":"Confirm no missing values exist in the final table.","outputs":[]},{"kind":2,"language":"sql","value":"SELECT\n    sum(CASE WHEN missing(MORTDUE) THEN 1 ELSE 0 END) as MISSING_MORTVALUE,\n    sum(CASE WHEN missing(VALUE) THEN 1 ELSE 0 END) as MISSING_VALUE\nFROM work.home_equity_final;","outputs":[]}]